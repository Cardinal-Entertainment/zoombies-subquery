type Transaction @entity {

  id: ID! # Transaction hash

  blockNumber: Int

  blockTimestamp: Date!

  value: BigInt!

  to: String!

  from: String!

  contractAddress: String!

}

type Sum @entity {

  id: ID! # only "1" ring to hold them all

  mintedTotal: BigInt

  burnedTotal: BigInt

}

type ZoomPerDay @entity {

  id: ID! #timestamp

  minted: BigInt

  burned: BigInt

}

# LogCardMinted(address indexed buyer, uint tokenId, uint32 indexed cardTypeId, uint editionNumber);

type LogCardMinted @entity {
	id: ID! # Transaction Hash

  blockNumber: Int

  blockTimestamp: Date!

  buyer: String!

  tokenId: BigInt!

  cardTypeId: Int!

  editionNumber: BigInt!
}

type LogPackOpened @entity {
 id: ID!

 blockNumber: Int

 blockTimestamp: Date!

 buyer: String!

 rarity: Int!
}

type LogSponsorReward @entity {
  id:ID!

  blockNumber: Int

  blockTimestamp: Date!

  sponsor: String!

  affiliate: String!

  zoomReward: BigInt!
}

type LogDailyReward @entity {
  id:ID!

  blockNumber: Int

  blockTimestamp: Date!

  player: String!

  newBoosterBalance: BigInt!
}

type LogRewardBooster @entity {
  id: ID!

  blockNumber: Int

  blockTimestamp: Date!

  winner: String!

  boostersAwarded: BigInt!
}

type LogSacrificeNFT @entity {
  id:ID!

  blockNumber: Int

  blockTimestamp: Date!

  owner: String!

  tokenId: BigInt!

  cardTypeId: BigInt!

  zoomGained: BigInt!
}

type NftTransfer @entity {
 id:ID!

 blockNumber: Int

 blockTimestamp: Date!

 from: String!

 to: String!

 tokenId: BigInt!
}
